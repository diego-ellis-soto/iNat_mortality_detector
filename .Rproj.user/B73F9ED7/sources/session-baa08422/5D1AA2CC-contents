#################################################
# monthly_mortality_wes_colors_tmap.R
# ----------------------------------------------
# 1) Splits each year into 12 monthly queries (avoid iNat page-limit).
# 2) Uses a Wes Anderson color palette for daily time-series & top-20 species.
# 3) Saves those plots if outdir is specified.
# 4) Creates a TMAP-based map that shows the top 90th percentile
#    daily mortality observations as hotspots.
# 5) Provides functions to query Canada, USA, or a custom bounding
#    box (e.g., for California).
#
# Diego Ellis Soto
# Jauary 14th 2015
#################################################

library(httr)
library(jsonlite)
library(tidyverse)
library(glue)
library(lubridate)
library(wesanderson)
library(tmap)   # For mapping
library(sf)     # For sf objects

#########################################################
# A) fetch_dead_data_once(): Single date-range query
#########################################################
fetch_dead_data_once <- function(
    place_id    = NULL,
    swlat       = NULL,
    swlng       = NULL,
    nelat       = NULL,
    nelng       = NULL,
    start_date,
    end_date,
    taxon_id    = 26036,
    per_page    = 1000,
    max_pages   = 50
) {
  # If user provided place_id, we do that approach.
  # If swlat/swlng/nelat/nelng, we do bounding box approach.
  # We'll build the appropriate location param.
  base_url <- "https://api.inaturalist.org/v1/observations"
  
  query_params <- glue(
    "annotation_term_id=9&",    # "Alive or Dead"
    "annotation_value_id=48&",  # "Dead"
    "taxon_id={taxon_id}&",
    "verifiable=true&",
    "d1={start_date}&d2={end_date}&",
    "order=desc&order_by=created_at&",
    "per_page={per_page}"
  )
  
  loc_part <- ""
  if (!is.null(place_id)) {
    loc_part <- glue("&place_id={place_id}")
  } else if (!is.null(swlat) && !is.null(swlng) && !is.null(nelat) && !is.null(nelng)) {
    loc_part <- glue("&nelat={nelat}&nelng={nelng}&swlat={swlat}&swlng={swlng}")
  } else {
    stop("Must provide either place_id OR bounding box (swlat, swlng, nelat, nelng).")
  }
  
  observations_list <- list()
  current_page <- 1
  
  while (current_page <= max_pages) {
    query_url <- paste0(
      base_url, "?",
      query_params,
      "&page=", current_page,
      loc_part
    )
    
    message("Fetching page ", current_page,
            " for date range [", start_date, " to ", end_date, "]: ", query_url)
    
    resp <- GET(query_url)
    if (http_error(resp)) {
      warning("HTTP error on page ", current_page, ": ", status_code(resp))
      break
    }
    
    parsed <- content(resp, as = "text", encoding = "UTF-8") %>%
      fromJSON(flatten = TRUE)
    
    if (length(parsed$results) == 0) {
      message("No more results at page ", current_page)
      break
    }
    
    obs_page_df <- as_tibble(parsed$results)
    observations_list[[current_page]] <- obs_page_df
    
    if (nrow(obs_page_df) < per_page) {
      message("Reached last page of results at page ", current_page)
      break
    }
    
    current_page <- current_page + 1
    Sys.sleep(1)  # small pause
  }
  
  observations_all <- bind_rows(observations_list) %>%
    mutate(life_status = "Dead")
  
  return(observations_all)
}

#########################################################
# B) fetch_dead_data_monthly()
#    - For one YEAR, split into 12 monthly intervals.
#########################################################
fetch_dead_data_monthly <- function(
    year,
    place_id   = NULL,
    swlat      = NULL,
    swlng      = NULL,
    nelat      = NULL,
    nelng      = NULL,
    taxon_id   = 26036
) {
  monthly_list <- list()
  
  for (month_i in 1:12) {
    start_date <- as.Date(glue("{year}-{sprintf('%02d', month_i)}-01"))
    end_date   <- start_date %m+% months(1) %m-% days(1)
    
    if (year(start_date) != year) break
    
    message("\n--- Querying year ", year, ", month ", month_i, " ---\n")
    
    df_month <- fetch_dead_data_once(
      place_id  = place_id,
      swlat     = swlat,
      swlng     = swlng,
      nelat     = nelat,
      nelng     = nelng,
      start_date= start_date,
      end_date  = end_date,
      taxon_id  = taxon_id
    )
    monthly_list[[month_i]] <- df_month
  }
  
  year_df <- bind_rows(monthly_list)
  return(year_df)
}

#########################################################
# C) getDeadVertebrates_monthlyLoop()
#    - Loops over multiple years, does monthly queries
#    - Merges data, returns 3 plots:
#       1) daily_plot (time-series)
#       2) top_species_plot (bar chart)
#       3) tmap of top 90th percentile mortality days
#
#    - outdir to save plots
#########################################################
getDeadVertebrates_monthlyLoop <- function(
    years       = c(2022, 2023),
    # Either place_id OR bounding box (swlat, swlng, nelat, nelng)
    place_id    = NULL,
    swlat       = NULL,
    swlng       = NULL,
    nelat       = NULL,
    nelng       = NULL,
    taxon_id    = 26036,  # e.g. 3=Birds, 40151=Mammals
    per_page    = 1000,
    max_pages   = 50,
    outdir      = NULL
) {
  # 1) Gather monthly data for each year
  all_years_list <- list()
  
  for (yr in years) {
    message("\n========= YEAR: ", yr, " ==========\n")
    yr_df <- fetch_dead_data_monthly(
      year     = yr,
      place_id = place_id,
      swlat    = swlat,
      swlng    = swlng,
      nelat    = nelat,
      nelng    = nelng,
      taxon_id = taxon_id
    ) %>%
      mutate(Window = as.character(yr))
    
    all_years_list[[as.character(yr)]] <- yr_df
  }
  
  merged_df <- bind_rows(all_years_list)
  
  if (!"created_at_details.date" %in% names(merged_df) ||
      nrow(merged_df) == 0) {
    # No data case
    daily_plot <- ggplot() +
      labs(title = "No 'Dead' Observations Found", x = NULL, y = NULL) +
      theme_void()
    
    top_species_plot <- ggplot() +
      labs(title = "No species data", x=NULL, y=NULL) +
      theme_void()
    
    map_hotspots <- tmap::tm_shape(NULL) + tmap::tm_tiles() # empty
    
    return(list(
      merged_df        = merged_df,
      daily_plot       = daily_plot,
      top_species_plot = top_species_plot,
      tmap_hotspots    = map_hotspots
    ))
  }
  
  # 2) Daily time-series
  counts_by_day <- merged_df %>%
    mutate(obs_date = as.Date(`created_at_details.date`)) %>%
    group_by(Window, obs_date) %>%
    summarise(n = n(), .groups="drop")
  
  n_windows  <- length(unique(counts_by_day$Window))
  wes_colors <- wes_palette("Zissou1", n_windows, type = "discrete")
  
  daily_plot <- ggplot(counts_by_day, aes(x=obs_date, y=n, color=Window)) +
    geom_line(size=1.2) +
    geom_point(size=2) +
    scale_color_manual(values=wes_colors) +
    scale_x_date(date_labels="%b", date_breaks="1 month") +
    labs(
      title = glue("Daily 'Dead' Observations (Years {paste(years, collapse=', ')})"),
      x     = "Month",
      y     = "Number of Observations",
      color = "Year"
    ) +
    theme_minimal(base_size=14) +
    theme(axis.text.x = element_text(angle=45, hjust=1))
  
  # 3) Top-20 species bar plot
  if ("taxon.name" %in% names(merged_df)) {
    species_counts <- merged_df %>%
      filter(!is.na(taxon.name)) %>%
      group_by(Window, taxon.name) %>%
      summarise(dead_count = n(), .groups="drop")
    
    top_species_overall <- species_counts %>%
      group_by(taxon.name) %>%
      summarise(total_dead=sum(dead_count)) %>%
      arrange(desc(total_dead)) %>%
      slice_head(n=20)
    
    species_top20 <- species_counts %>%
      filter(taxon.name %in% top_species_overall$taxon.name)
    
    top_species_plot <- ggplot(species_top20, aes(
      x = reorder(taxon.name, -dead_count),
      y = dead_count,
      fill = Window
    )) +
      geom_col(position=position_dodge(width=0.7)) +
      coord_flip() +
      scale_fill_manual(values=wes_colors) +
      labs(
        title = "Top 20 Species with 'Dead' Observations",
        x     = "Species",
        y     = "Number of Dead Observations",
        fill  = "Year"
      ) +
      theme_minimal(base_size=14)
  } else {
    top_species_plot <- ggplot() +
      labs(title="No 'taxon.name' column found", x=NULL, y=NULL) +
      theme_void()
  }
  
  # 4) TMAP of top 90th percentile daily mortality (Spatial hotspots)
  #    a) Identify daily mortality threshold at 90th percentile
  #    b) Filter merged_df to only those dates that exceed that threshold
  #    c) Convert to sf using lat/long columns if available.
  
  # 4a) find daily threshold
  daily_quantile <- quantile(counts_by_day$n, probs=0.90)  # 90th percentile
  # list of days that exceed that threshold
  high_mortality_days <- counts_by_day %>%
    filter(n >= daily_quantile) %>%
    pull(obs_date)
  
  # 4b) filter merged_df to those days
  merged_high <- merged_df %>%
    mutate(obs_date = as.Date(`created_at_details.date`)) %>%
    filter(obs_date %in% high_mortality_days)
  
  # 4c) Convert to sf if we have lat/lon columns
  # Check columns
  if ("longitude" %in% names(merged_high) && "latitude" %in% names(merged_high)) {
    # Use these columns
    sf_hotspots <- st_as_sf(merged_high,
                            coords = c("longitude", "latitude"),
                            crs = 4326, remove=FALSE
    )
    
    # Create a TMAP. We can do a simple dot map:
    tmap_mode("plot")  # or "view" for interactive
    map_hotspots <- tm_shape(sf_hotspots) +
      tm_dots(
        col   = "Window",
        palette = wes_colors,
        size  = 0.05,
        alpha = 0.7,
        title = "Year"
      ) +
      tm_layout(
        frame = FALSE,
        title = glue("Top 90th percentile mortality days ({paste(years, collapse=', ')})"),
        legend.outside = TRUE
      )
    
  } else if ("location" %in% names(merged_high)) {
    # If you have a location col with "lat,lon" string, parse it, then convert to sf similarly
    # Skipping details for brevity, but you can replicate logic from the cluster approach.
    map_hotspots <- tm_shape(NULL) + tm_tiles() +
      tm_layout(title="Map for top 90% days not implemented for location as lat,lon string")
  } else {
    # No recognized coords
    map_hotspots <- tm_shape(NULL) + tm_layout(
      title="No lat/long columns for top 90% days map"
    )
  }
  
  # 5) Optionally save all plots to outdir
  if (!is.null(outdir)) {
    if (!dir.exists(outdir)) {
      dir.create(outdir, recursive=TRUE)
    }
    # daily_plot
    ggsave(file.path(outdir, "daily_plot.png"), daily_plot, width=8, height=5, dpi=300)
    # top_species_plot
    ggsave(file.path(outdir, "top_species_plot.png"), top_species_plot, width=7, height=7, dpi=300)
    # map_hotspots: we can save with tmap_save
    tmap_save(map_hotspots, file.path(outdir, "map_hotspots.html")) # or .png
    # if you want a png instead of interactive HTML
    # tmap_save(map_hotspots, file.path(outdir, "map_hotspots.png"), width=800, height=600)
  }
  
  # 6) Return results
  return(list(
    merged_df         = merged_high,      # or entire dataset?
    daily_plot        = daily_plot,
    top_species_plot  = top_species_plot,
    tmap_hotspots     = map_hotspots,
    daily_90th_quant  = daily_quantile    # numeric threshold
  ))
}

#########################################################
#  D) Simple wrapper functions for Canada, USA, California
#########################################################

# 1) Canada
getDeadVertebrates_canada <- function(
    years     = c(2022,2023, 2024, 2025),
    taxon_id  = 26036,
    outdir    = NULL
) {
  # place_id=6712 is iNat for Canada
  getDeadVertebrates_monthlyLoop(
    years    = years,
    place_id = 6712,
    taxon_id = taxon_id,
    outdir   = outdir
  )
}

# 2) USA
getDeadVertebrates_usa <- function(
    years     = c(2022,2023, 2024, 2025),
    taxon_id  = 26036,
    outdir    = NULL
) {
  # place_id=1 for USA
  getDeadVertebrates_monthlyLoop(
    years    = years,
    place_id = 1,
    taxon_id = taxon_id,
    outdir   = outdir
  )
}

# 3) California bounding box approach
# approximate bounding box: SW corner ~ (32.5, -124.5), NE corner ~ (42.0, -114.1)
getDeadVertebrates_california <- function(
    years     = c(2022,2023),
    taxon_id  = 26036,
    outdir    = NULL
) {
  getDeadVertebrates_monthlyLoop(
    years    = years,
    swlat    = 32.5,
    swlng    = -124.5,
    nelat    = 42.0,
    nelng    = -114.1,
    taxon_id = taxon_id,
    outdir   = outdir
  )
}

#########################################################
# Example usage:
#########################################################

# Canada birds:
res_canada <- getDeadVertebrates_canada(
  years    = c(2022,2023,2024, 2025),
  taxon_id = 3,  # Birds
  outdir   = "outputs/canada_birds"
)
# => This will produce daily_plot.png, top_species_plot.png, map_hotspots.html (or .png)
#    in "outputs/canada_birds/"

# USA mammals:
res_usa <- getDeadVertebrates_usa(
  years    = c(2022,2023),
  taxon_id = 40151, # Mammals
  outdir   = "outputs/usa_mammals"
)

# CA bounding box, e.g. for amphibians (taxon_id=20978 just as example):
res_ca <- getDeadVertebrates_california(
  years    = c(2022,2023),
  taxon_id = 20978,
  outdir   = "outputs/california_amphibians"
)

# Check resulting plots, e.g.:
res_canada$tmap_hotspots  # to view the TMAP object in R
tmap_mode("view"); res_canada$tmap_hotspots  # for interactive
